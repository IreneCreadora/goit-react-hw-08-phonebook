{"version":3,"file":"static/js/945.ca70f91b.chunk.js","mappings":"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","sources":["redux/contacts/contactsSelectors.js","redux/filter/filterSelectors.js","components/ContactForm/ContactForm.styled.js","components/FormikComponents/ErrorMessage.styled.js","components/FormikComponents/ErrorMessageFormik.js","components/ContactForm/initialValuesData.js","components/ContactForm/yup-validation.js","components/ContactForm/ContactForm.js","components/Notification/Notification.styled.js","components/Notification/Notification.js","components/Filter/Filter.styled.js","components/Filter/Filter.js","components/ContactList/ContactList.styled.js","components/ContactList/ContactItem.js","components/ContactList/ContactList.js","pages/ContactsPage.js","pages/ContactsPage.styled.js"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\nimport { selectFilter } from 'redux/filter/filterSelectors';\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectVisibleContacts = createSelector(\n  [selectFilter, selectContacts],\n  (filter, contacts) => {\n    const normalizeFilter = filter.value.trim().toLowerCase();\n\n    return contacts.filter(contact =>\n      contact.name.trim().toLowerCase().includes(normalizeFilter)\n    );\n  }\n);\n","export const selectFilter = state => state.filter;\n","import styled from '@emotion/styled';\nimport { Form, Field } from 'formik';\n\nexport const FormStyled = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  padding: 5px 40px;\n\n  font-weight: 400;\n  font-size: 16px;\n  line-height: 1.33;\n  color: white;\n`;\n\nexport const Input = styled(Field)`\n  width: 100%;\n  background-color: inherit;\n  outline: none;\n  border-radius: 4px;\n  padding: 8px;\n  height: 28px;\n  font-size: 16px;\n  color: antiquewhite;\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  padding: 12px 4px 4px 8px;\n`;\n\nexport const Button = styled.button`\n  display: block;\n  margin: 20px auto 0 auto;\n  padding: 8px;\n  font-size: 12px;\n  color: #e0dede;\n  min-width: 100px;\n  border: 1px solid gray;\n  border-radius: 5px;\n  background: rgba(0, 0, 0, 0.5);\n  text-shadow: 0 0 5px #000;\n  &:hover,\n  &:focus {\n    color: #45baff;\n    border: 1px solid black;\n  }\n`;\n","import styled from '@emotion/styled';\n\nexport const ErrorText = styled.p`\n  color: red;\n`;\n","import { ErrorMessage } from 'formik';\nimport { ErrorText } from './ErrorMessage.styled';\n\nconst FormError = ({ name }) => {\n  return (\n    <ErrorMessage\n      name={name}\n      render={message => <ErrorText>{message}</ErrorText>}\n    />\n  );\n};\nexport default FormError;\n","export const initialValues = {\n  name: '',\n  number: '',\n};\n","import * as Yup from 'yup';\n\nexport const validationSchema = Yup.object({\n  name: Yup.string().required(),\n  number: Yup.number().min(8, 'Too Short!').required(),\n});\n","import { useDispatch } from 'react-redux';\nimport { addContact } from 'redux/contacts/contactsOperations';\nimport { useSelector } from 'react-redux';\nimport { selectContacts } from '../../redux/contacts/contactsSelectors';\n\nimport { Formik } from 'formik';\nimport { FormStyled, Label, Input, Button } from './ContactForm.styled';\n\nimport FormError from '../FormikComponents/ErrorMessageFormik';\n\nimport { initialValues } from './initialValuesData';\nimport { validationSchema } from './yup-validation';\n\nconst ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const handleSubmit = (values, { resetForm }) => {\n    if (!values) return;\n\n    const isInContact = contacts.find(\n      contact => contact.name.toLowerCase() === values.name.toLowerCase()\n    );\n\n    if (isInContact) {\n      alert(`${values.name} is already in contact`);\n      return false;\n    }\n\n    dispatch(addContact(values));\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={validationSchema}\n      onSubmit={handleSubmit}\n    >\n      <FormStyled autoComplete=\"off\">\n        <div>\n          <Label htmlFor=\"name\">Full name</Label>\n          <div>\n            <Input name=\"name\" type=\"text\" placeholder=\"please add name...\" />\n            <FormError name=\"name\" />\n          </div>\n        </div>\n        <div>\n          <Label htmlFor=\"number\">Phone number</Label>\n          <div>\n            <Input\n              name=\"number\"\n              type=\"text\"\n              placeholder=\"please add phone number...\"\n            />\n            <FormError name=\"number\" />\n          </div>\n        </div>\n        <Button type=\"submit\">Add contact</Button>\n      </FormStyled>\n    </Formik>\n  );\n};\n\nexport default ContactForm;\n","import styled from '@emotion/styled';\n\nexport const Message = styled.h3`\n  text-align: center;\n  color: #003060;\n`;\n","import propTypes from 'prop-types';\n\nimport { Message } from './Notification.styled';\n\nconst Notification = ({ message }) => {\n  return <Message>{message}</Message>;\n};\n\nNotification.propTypes = {\n  message: propTypes.string.isRequired,\n};\n\nexport default Notification;\n","import styled from '@emotion/styled';\n\nexport const Wrapper = styled.div`\n  padding: 5px 40px;\n`;\n\nexport const FilterStyled = styled.label`\n  padding-left: 12px;\n  color: #979595;\n`;\n\nexport const FilterInput = styled.input`\n  width: 100%;\n  margin-top: 5px;\n  background-color: inherit;\n  outline: none;\n  border-radius: 4px;\n  padding: 5px;\n  height: 28px;\n  font-size: 16px;\n  color: antiquewhite;\n`;\n","import { useDispatch } from 'react-redux';\nimport { setFilter } from 'redux/filter/filterSlice';\n\nimport { Wrapper, FilterStyled, FilterInput } from './Filter.styled';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n\n  return (\n    <Wrapper>\n      <FilterStyled>\n        <span>Find contact by name </span>\n        <FilterInput\n          type=\"text\"\n          placeholder=\"enter name or phone number...\"\n          name=\"filter\"\n          onChange={e => dispatch(setFilter(e.target.value))}\n        />\n      </FilterStyled>\n    </Wrapper>\n  );\n};\n\nexport default Filter;\n","import styled from '@emotion/styled';\n\nexport const ContactListStyled = styled.ul`\n  margin-top: 16px;\n  justify-content: center;\n  align-items: center;\n  padding: 10px 20px;\n`;\n\nexport const ContactItemStyled = styled.li`\n  display: block;\n  width: 100%;\n  justify-content: space-between;\n  align-items: center;\n  margin: 4px 0;\n  padding: 5px 20px;\n  border-radius: 4px;\n  border: 1px solid gray;\n  font-weight: 400;\n  font-size: 16px;\n  line-height: 1.33;\n  color: white;\n`;\n\nexport const Wrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nexport const DeleteBtn = styled.button`\n  display: block;\n  padding: 8px;\n  font-size: 12px;\n  color: #e0dede;\n  width: 60px;\n  border: 1px solid gray;\n  border-radius: 5px;\n  background: rgba(0, 0, 0, 0.5);\n  text-shadow: 0 0 5px #000;\n  &:hover,\n  &:focus {\n    color: #45baff;\n    border: 1px solid black;\n  }\n`;\n","import { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/contactsOperations';\n\nimport propTypes from 'prop-types';\nimport { ContactItemStyled, Wrapper, DeleteBtn } from './ContactList.styled';\n\nconst ContactItem = ({ contact }) => {\n  const { id, name, number } = contact;\n  const dispatch = useDispatch();\n\n  return (\n    <ContactItemStyled>\n      <Wrapper>\n        <p>{name}</p>\n        <p>{number}</p>\n        <DeleteBtn type=\"button\" onClick={() => dispatch(deleteContact(id))}>\n          Delete\n        </DeleteBtn>\n      </Wrapper>\n    </ContactItemStyled>\n  );\n};\n\nContactItem.propTypes = {\n  contact: propTypes.shape({\n    id: propTypes.string.isRequired,\n    name: propTypes.string.isRequired,\n    number: propTypes.string.isRequired,\n  }),\n};\n\nexport default ContactItem;\n","import { useSelector } from 'react-redux';\nimport { selectVisibleContacts } from '../../redux/contacts/contactsSelectors';\nimport ContactItem from './ContactItem';\nimport { ContactListStyled } from './ContactList.styled';\n\nconst ContactList = () => {\n  const contacts = useSelector(selectVisibleContacts);\n\n  return (\n    <ContactListStyled>\n      {contacts.map(({ id, name, number }) => {\n        return (\n          <ContactItem\n            contact={{\n              id,\n              name,\n              number,\n            }}\n            key={id}\n          />\n        );\n      })}\n    </ContactListStyled>\n  );\n};\n\nexport default ContactList;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\n\nimport {\n  selectContacts,\n  selectError,\n  selectIsLoading,\n} from '../redux/contacts/contactsSelectors.js';\nimport { fetchContacts } from '../redux/contacts/contactsOperations';\n\nimport ContactForm from '../components/ContactForm/ContactForm.js';\nimport Notification from '../components/Notification/Notification.js';\nimport Filter from '../components/Filter/Filter.js';\nimport ContactList from '../components/ContactList/ContactList.js';\n\nimport { Container, Phonebook, Contacts, Section } from './ContactsPage.styled';\n\nexport default function ContactsPage() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const contacts = useSelector(selectContacts);\n  return (\n    <Container>\n      <Helmet>\n        <title>Phonebook</title>\n      </Helmet>\n      <Phonebook>Phonebook</Phonebook>\n      <ContactForm />\n      {isLoading && !error && <b>Request in progress...</b>}\n      <Contacts>Contacts</Contacts>\n      {contacts.length === 0 ? (\n        <Notification message=\"Your contact book is empty, add your first contact!\" />\n      ) : (\n        <Section>\n          <Filter />\n          <ContactList />\n        </Section>\n      )}\n    </Container>\n  );\n}\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  margin: 30px auto 20px auto;\n  width: 680px;\n  height: auto;\n  padding: 20px;\n  background: rgba(0, 0, 0, 0.3);\n  border-radius: 20px;\n`;\n\nexport const Phonebook = styled.h1`\n  margin-bottom: 8px;\n  font-weight: 700;\n  font-size: 36px;\n  line-height: 1.18;\n  text-align: center;\n  color: #9f40ff;\n`;\n\nexport const Contacts = styled.h2`\n  margin-top: 20px;\n  margin-bottom: 8px;\n  font-weight: 500;\n  font-size: 30px;\n  line-height: 1.18;\n  text-align: center;\n  color: #979595;\n`;\n\nexport const Section = styled.section`\n  margin: 20px auto;\n`;\n"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectVisibleContacts","createSelector","filter","normalizeFilter","value","trim","toLowerCase","contact","name","includes","FormStyled","styled","Form","Input","Field","Label","Button","ErrorText","render","message","initialValues","number","validationSchema","Yup","required","min","dispatch","useDispatch","useSelector","onSubmit","values","resetForm","find","alert","addContact","autoComplete","htmlFor","type","placeholder","Message","Wrapper","FilterStyled","FilterInput","onChange","e","setFilter","target","ContactListStyled","ContactItemStyled","DeleteBtn","id","onClick","deleteContact","map","ContactsPage","useEffect","fetchContacts","Helmet","length","Container","Phonebook","Contacts","Section"],"sourceRoot":""}